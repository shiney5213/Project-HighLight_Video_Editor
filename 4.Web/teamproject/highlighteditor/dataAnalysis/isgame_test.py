# -*- coding: utf-8 -*-
"""isgame_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B_U1k_-IH3MCgwm6mdTlrt6kRdug_5T3
"""

from tensorflow.keras.models import load_model
import cv2
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import time, os

def doubleDigit(num):
    if num < 10 :
        return '0'+str(num)
    else:
        return str(num)
    
def time_msec(time):
    time_split=time.split(':')
    if len(time_split) == 2 :
        sec = int(time_split[0])*60+int(time_split[1])
        return sec*1000
    elif len(time_split) == 3 :
        sec = (int(time_split[0])*60+int(time_split[1]))*60+int(time_split[2])
        return sec*1000

# 이건 밀리세컨드가 아니라 초로 바꾸는 함수!!(주의)
def time_sec(time):
    time_split=time.split(':')
    if len(time_split) == 2 :
        sec = int(time_split[0])*60+int(time_split[1])
        return sec
    elif len(time_split) == 3 :
        sec = (int(time_split[0])*60+int(time_split[1]))*60+int(time_split[2])
        return sec    

def msec_time(msec):
    sec = msec/1000
    m=sec//60
    h=m//60
    m=m%60
    s=sec%60
    
    return str(doubleDigit(int(h)))+':'+str(doubleDigit(int(m)))+':'+str(doubleDigit(int(s)))

def sec_time(sec):
    m=sec//60
    h=m//60
    m=m%60
    s=sec%60
    
    return str(doubleDigit(h))+':'+str(doubleDigit(m))+':'+str(doubleDigit(s))

def isGame(frame, model):
    img = frame/255
    img.resize((150,150,3))
    # plt.imshow(img)
    img = np.expand_dims(img, axis=0)
    # print(model.predict(img))
    if model.predict(img) < 0.2:
        # print('게임중')
        return 1
    else :
        # print('게임 안하는 중')
        return 0

def gaming(filepath, model, pluscount):
    cap = cv2.VideoCapture(filepath)
    count = 0
    file_end = cap.get(cv2.CAP_PROP_FRAME_COUNT)
    print('file_end',file_end)

    datalist = []
    while cap.isOpened():
        
        ret, frame = cap.read()
        print('ret', ret)
        if ret:
            print(count)
            isgame = isGame(frame, model)
            count += pluscount
            
            datalist.append([isgame,count])
            print(datalist)
            if count >= file_end:
                break
            cap.set(cv2.CAP_PROP_POS_FRAMES, count)
        else:
            cap.release()
            break

    countlist=[]
    for i in range(len(datalist)-1):
        if datalist[i][0] != datalist[i+1][0]:
            for j in range(8):
                countlist.append(datalist[i][1]+(1800*(j+1)))

    datalist2=[]
    for c in countlist:
        cap.set(cv2.CAP_PROP_POS_FRAMES, c)
        ret, frame = cap.read()
        isgame = isGame(frame, model)
        datalist2.append([isgame, c])
    cap.release()

    ######################

    datali=datalist+datalist2
    df = pd.DataFrame(index=[i for i in range(int(file_end))])

    dl = pd.DataFrame(datali)
    dl.columns = [0, 'index']
    df.reset_index(inplace=True)

    dff = pd.merge(df, dl, how='left')

    dff.set_index('index', inplace=True)
    dff.fillna(method='ffill', inplace=True)
    dff.fillna(method='bfill', inplace=True)

    return dff

def startgame(filepath, data_path, pluscount):
    model = load_model('./static/highlighteditor/isgame.h5')
    print('model import success')
    # filepath = '/content/drive/My Drive/highlight/data/20200508_Faker_614572048.mp4'
    print(filepath, os.path.isfile(filepath))
    df = gaming(filepath, model, pluscount)

    try:
        df.to_csv(data_path +'/isgame.csv', index = False)
    except Exception as err:
        print(err)   
    return df
# plt.plot(df)